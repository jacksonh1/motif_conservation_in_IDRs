# configfile: "./snake_config.yaml"

ALIGNMENTS, = glob_wildcards("../../data/example_orthogroup_database/odb_group_pipeline_output/alignments/{alignment}.fasta")
SAMPLES, = glob_wildcards("../../data/example_orthogroup_database/odb_group_pipeline_output/alignments/{sample}_clustered_ldos_aln.fasta")
# print(ALIGNMENTS)
# database_dir = "../../data/example_orthogroup_database/"
# aln_dir = "../../data/example_orthogroup_database/odb_group_pipeline_output/alignments/"

rule all:
    input:
        expand("../../data/example_orthogroup_database/alignment_conservation_scores/valdar-EDSSMat50_max_offdiag_norm/{alignment}_valdar-EDSSMat50_max_offdiag_norm.json", alignment=ALIGNMENTS),
        expand("../../data/example_orthogroup_database/alignment_conservation_scores/property_entropy/{alignment}_property_entropy.json", alignment=ALIGNMENTS),

rule valdar_edssmat50:
    input:
        "../../data/example_orthogroup_database/odb_group_pipeline_output/alignments/{alignment}.fasta"
    output:
        "../../data/example_orthogroup_database/alignment_conservation_scores/valdar-EDSSMat50_max_offdiag_norm/{alignment}_valdar-EDSSMat50_max_offdiag_norm.json"
    shell:
        "../local_scripts/valdar_score_fl_alns.py -i {input} -o {output} -m EDSSMat50_max_off_diagonal_norm"

rule property_entropy:
    input:
        "../../data/example_orthogroup_database/odb_group_pipeline_output/alignments/{alignment}.fasta"
    output:
        "../../data/example_orthogroup_database/alignment_conservation_scores/property_entropy/{alignment}_property_entropy.json"
    shell:
        "../local_scripts/PE_score_fl_alns_PE.py -i {input} -o {output}"
