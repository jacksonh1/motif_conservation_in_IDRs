import json
import os
from pathlib import Path

from Bio import AlignIO, SeqIO

from local_conservation_score_tools import \
    conservation_scoring_tools as score_tools


class ConserGene:
    """
    This class is for reading the json files generated by the conservation pipeline.
    """

    def __init__(self, json_filepath):
        self.json_filepath = Path(json_filepath)
        with open(self.json_filepath, "r") as f:
            self.info_dict = json.load(f)

        self.reference_index = self.info_dict["reference_index"]
        self.query_gene_id = self.info_dict["query_gene_id"]
        self.hit_sequence = self.info_dict["hit_sequence"]
        self.query_sequence = self.info_dict["query_sequence"]
        self.hit_start_position = self.info_dict["hit_start_position"]
        self.hit_end_position = self.info_dict["hit_end_position"]
        self.hit_in_idr = self.info_dict["hit_in_idr"]
        self.idr_start = self.info_dict["idr_start"]
        self.idr_end = self.info_dict["idr_end"]
        if 'analysis_folder' in self.info_dict:
            self.analysis_folder = self.info_dict["analysis_folder"]
        self.levels_passing_filters = self.info_dict["levels_passing_filters"]
        self.level_objects: dict[str,ConserLevel]|None = None
    
    def load_levels(self):
        self.level_objects = {}
        for level in self.levels_passing_filters:
            self.level_objects[level] = ConserLevel.from_dict(
                self.info_dict["orthogroups"][level]
            )
    
    def load_scores(self, score_key):
        self.load_levels()
        for level_obj in self.level_objects.values():
            level_obj.load_scores(score_key)

    def calculate_z_scores(self, score_key, bg_region=None, num_bg_scores_cutoff=20):
        self.load_levels()
        for level_obj in self.level_objects.values():
            level_obj.calculate_z_scores_bg_region(
                score_key,
                bg_region=bg_region,
                num_bg_scores_cutoff=num_bg_scores_cutoff,
            )


    def _overwrite_json(self):
        with open(self.json_filepath, "w") as f:
            json.dump(self.info_dict, f, indent=4)

    def add_item_to_json(self, key, value, save_json=True):
        self.info_dict[key] = value
        if save_json:
            self._overwrite_json()

    def add_item_to_lvl_orthogroup(self, key, value, level, save_json=True):
        self.info_dict["orthogroups"][level][key] = value
        if save_json:
            self._overwrite_json()


class ConserLevel:
    def __init__(
        self,
        alignment_clustered_ldos_file,
        hit_aln_start,
        hit_aln_end,
        idr_aln_start,
        idr_aln_end,
        query_aln_sequence,
        hit_aln_sequence,
        num_clustered_ldos,
        aln_conservation_scores,
    ):
        self.alignment_clustered_ldos_file = Path(alignment_clustered_ldos_file)
        self.hit_aln_start = hit_aln_start
        self.hit_aln_end = hit_aln_end
        self.idr_aln_start = idr_aln_start
        self.idr_aln_end = idr_aln_end
        self.query_aln_sequence = query_aln_sequence
        self.hit_aln_sequence = hit_aln_sequence
        self.num_clustered_ldos = num_clustered_ldos
        self.aln_conservation_scores = aln_conservation_scores
        with open(self.alignment_clustered_ldos_file, "r") as f:
            self.aln = AlignIO.read(f, "fasta")
        self.scores = None
        self.score_mask = None
        self.gap_mask = None
        self.z_scores = None
        self.bg_scores = None
        self.z_score_failure = None

    @classmethod
    def from_dict(cls, dict):
        return cls(**dict)

    def load_scores(self, score_key):
        with open(self.aln_conservation_scores[score_key], "r") as f:
            score_dict = json.load(f)
        self.scores = score_dict["scores"]
        self.score_mask = score_dict["score_mask"]
        self.gap_mask = score_dict["gap_mask"]

    def calculate_z_scores_bg_region(self, score_key, bg_region=None, num_bg_scores_cutoff=20):
        self.load_scores(score_key)
        if bg_region is None:
            bg_region = [self.idr_aln_start, self.idr_aln_end+1]
        try:
            z_score_dict = score_tools.calculate_z_score_bg_region(
                self.scores,
                self.score_mask,
                bg_region,
                num_bg_scores_cutoff=num_bg_scores_cutoff,
            )
        except ValueError as ve:
            self.z_score_failure = str(ve)
            return
        self.z_scores = z_score_dict["z_scores"]
        self.bg_scores = z_score_dict["bg_scores"]
        
                




# class conservation_level_score(ConserLevel):

#     def __init__(self, level_dict, score_key):
#         super().from_dict(level_dict)
#         self.score_key = score_key
    
#     def load_scores(self, score_key):
#         with open(self.aln_conservation_scores[score_key], "r") as f:
#             self.score_dict = json.load(f)
#         self.scores = self.score_dict["scores"]
#         self.score_mask = self.score_dict["score_mask"]
#         self.gap_mask = self.score_dict["gap_mask"]

#     def calculate_z_scores_bg_region(self, bg_region=None, num_bg_scores_cutoff=20):
#         if bg_region is None:
#             bg_region = [self.idr_aln_start, self.idr_aln_end+1]
#         z_score_dict = score_tools.calculate_z_score_bg_region(
#             self.scores,
#             self.score_mask,
#             bg_region,
#             num_bg_scores_cutoff=num_bg_scores_cutoff,
#         )
#         return z_score_dict










